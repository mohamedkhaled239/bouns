#include <iostream>
using namespace std;

class kStacks
{
	int *arr1;
	int *arr2;
	int *arr3;

	int n, k;
	int free;
public:
	kStacks(int k, int n);

	bool isFull() { return (free == -1); }

	void push(int item, int sn);

	int pop(int sn);

	bool isEmpty(int sn) { return (arr2[sn] == -1); }
};

kStacks::kStacks(int k1, int n1)
{
	k = k1, n = n1;
	arr1 = new int[n];
	arr2 = new int[k];
	arr3 = new int[n];

	for (int i = 0; i < k; i++)
		arr2[i] = -1;

		
	free = 0;
	for (int i=0; i<n-1; i++)
		arr3[i] = i+1;
	arr3[n-1] = -1;
}

void kStacks::push(int item, int sn)
{
	if (isFull())
	{
		cout << "\nStack Overflow\n";
		return;
	}

	int i = free;

	free = arr3[i];

	arr3[i] = arr2[sn];
	arr2[sn] = i;

	arr1[i] = item;
}

int kStacks::pop(int sn)
{
	if (isEmpty(sn))
	{
		cout << "\nStack Underflow\n";
		return INT_MAX;
	}

	int i = arr2[sn];

	arr2[sn] = arr3[i];

	arr3[i] = free;
	free = i;

	return arr1[i];
}

int main()
{int k = 6, n = 6;
	kStacks ks(k, n);

	ks.push(11, 2);
	ks.push(22, 2);

	ks.push(33, 1);
	ks.push(44, 1);

	ks.push(55, 0);
	ks.push(66, 0);

	cout << "Pop element from stack 2 is " << ks.pop(2) << endl;
	cout << "Pop element from stack 1 is " << ks.pop(1) << endl;
	cout << "Pop element from stack 0 is " << ks.pop(0) << endl;

	return 0;
}
